// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tabi/captain-node/v1/events.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventMint is the mint event
type EventMint struct {
	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	NodeId     string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	DivisionId string `protobuf:"bytes,3,opt,name=division_id,json=divisionId,proto3" json:"division_id,omitempty"`
	Owner      string `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *EventMint) Reset()         { *m = EventMint{} }
func (m *EventMint) String() string { return proto.CompactTextString(m) }
func (*EventMint) ProtoMessage()    {}
func (*EventMint) Descriptor() ([]byte, []int) {
	return fileDescriptor_f359615061b6a883, []int{0}
}
func (m *EventMint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventMint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventMint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventMint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMint.Merge(m, src)
}
func (m *EventMint) XXX_Size() int {
	return m.Size()
}
func (m *EventMint) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMint.DiscardUnknown(m)
}

var xxx_messageInfo_EventMint proto.InternalMessageInfo

func (m *EventMint) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *EventMint) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *EventMint) GetDivisionId() string {
	if m != nil {
		return m.DivisionId
	}
	return ""
}

func (m *EventMint) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

// EventReceiveExperience is the event for receiving experience
type EventReceiveExperience struct {
	NodeId                    string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	OldDivisionId             string `protobuf:"bytes,2,opt,name=old_division_id,json=oldDivisionId,proto3" json:"old_division_id,omitempty"`
	NewDivisionId             string `protobuf:"bytes,3,opt,name=new_division_id,json=newDivisionId,proto3" json:"new_division_id,omitempty"`
	ReceiveExperienceAmount   string `protobuf:"bytes,4,opt,name=receive_experience_amount,json=receiveExperienceAmount,proto3" json:"receive_experience_amount,omitempty"`
	RemainingExperienceAmount string `protobuf:"bytes,5,opt,name=remaining_experience_amount,json=remainingExperienceAmount,proto3" json:"remaining_experience_amount,omitempty"`
	Sender                    string `protobuf:"bytes,6,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *EventReceiveExperience) Reset()         { *m = EventReceiveExperience{} }
func (m *EventReceiveExperience) String() string { return proto.CompactTextString(m) }
func (*EventReceiveExperience) ProtoMessage()    {}
func (*EventReceiveExperience) Descriptor() ([]byte, []int) {
	return fileDescriptor_f359615061b6a883, []int{1}
}
func (m *EventReceiveExperience) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventReceiveExperience) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventReceiveExperience.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventReceiveExperience) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventReceiveExperience.Merge(m, src)
}
func (m *EventReceiveExperience) XXX_Size() int {
	return m.Size()
}
func (m *EventReceiveExperience) XXX_DiscardUnknown() {
	xxx_messageInfo_EventReceiveExperience.DiscardUnknown(m)
}

var xxx_messageInfo_EventReceiveExperience proto.InternalMessageInfo

func (m *EventReceiveExperience) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *EventReceiveExperience) GetOldDivisionId() string {
	if m != nil {
		return m.OldDivisionId
	}
	return ""
}

func (m *EventReceiveExperience) GetNewDivisionId() string {
	if m != nil {
		return m.NewDivisionId
	}
	return ""
}

func (m *EventReceiveExperience) GetReceiveExperienceAmount() string {
	if m != nil {
		return m.ReceiveExperienceAmount
	}
	return ""
}

func (m *EventReceiveExperience) GetRemainingExperienceAmount() string {
	if m != nil {
		return m.RemainingExperienceAmount
	}
	return ""
}

func (m *EventReceiveExperience) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// EventUpdatePowerOnPeriod is the event for updating power on period
type EventUpdatePowerOnPeriod struct {
	NodeId           string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	OldPowerOnPeriod string `protobuf:"bytes,2,opt,name=old_power_on_period,json=oldPowerOnPeriod,proto3" json:"old_power_on_period,omitempty"`
	NewPowerOnPeriod string `protobuf:"bytes,3,opt,name=new_power_on_period,json=newPowerOnPeriod,proto3" json:"new_power_on_period,omitempty"`
	Sender           string `protobuf:"bytes,4,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *EventUpdatePowerOnPeriod) Reset()         { *m = EventUpdatePowerOnPeriod{} }
func (m *EventUpdatePowerOnPeriod) String() string { return proto.CompactTextString(m) }
func (*EventUpdatePowerOnPeriod) ProtoMessage()    {}
func (*EventUpdatePowerOnPeriod) Descriptor() ([]byte, []int) {
	return fileDescriptor_f359615061b6a883, []int{2}
}
func (m *EventUpdatePowerOnPeriod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUpdatePowerOnPeriod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUpdatePowerOnPeriod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUpdatePowerOnPeriod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUpdatePowerOnPeriod.Merge(m, src)
}
func (m *EventUpdatePowerOnPeriod) XXX_Size() int {
	return m.Size()
}
func (m *EventUpdatePowerOnPeriod) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUpdatePowerOnPeriod.DiscardUnknown(m)
}

var xxx_messageInfo_EventUpdatePowerOnPeriod proto.InternalMessageInfo

func (m *EventUpdatePowerOnPeriod) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *EventUpdatePowerOnPeriod) GetOldPowerOnPeriod() string {
	if m != nil {
		return m.OldPowerOnPeriod
	}
	return ""
}

func (m *EventUpdatePowerOnPeriod) GetNewPowerOnPeriod() string {
	if m != nil {
		return m.NewPowerOnPeriod
	}
	return ""
}

func (m *EventUpdatePowerOnPeriod) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func init() {
	proto.RegisterType((*EventMint)(nil), "tabi.captain_node.v1.EventMint")
	proto.RegisterType((*EventReceiveExperience)(nil), "tabi.captain_node.v1.EventReceiveExperience")
	proto.RegisterType((*EventUpdatePowerOnPeriod)(nil), "tabi.captain_node.v1.EventUpdatePowerOnPeriod")
}

func init() { proto.RegisterFile("tabi/captain-node/v1/events.proto", fileDescriptor_f359615061b6a883) }

var fileDescriptor_f359615061b6a883 = []byte{
	// 403 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0x63, 0xd3, 0x1a, 0x75, 0x50, 0x69, 0xe5, 0x56, 0xad, 0x2b, 0x24, 0x03, 0x39, 0x54,
	0x5c, 0x6c, 0xab, 0xe2, 0xc6, 0x01, 0x09, 0x44, 0x85, 0x7a, 0x40, 0x44, 0x91, 0xb8, 0x70, 0x59,
	0xd9, 0xde, 0x51, 0x58, 0xe1, 0xcc, 0x5a, 0xeb, 0x8d, 0x1d, 0xde, 0x82, 0x0b, 0x0f, 0xc1, 0x9b,
	0x70, 0xcc, 0x91, 0x23, 0x4a, 0x5e, 0x04, 0xed, 0x3a, 0x24, 0x76, 0x42, 0x6f, 0x9e, 0x99, 0x6f,
	0xfc, 0xff, 0xfb, 0x6b, 0xe0, 0xb9, 0x4e, 0x33, 0x91, 0xe4, 0x69, 0xa9, 0x53, 0x41, 0x11, 0x49,
	0x8e, 0x49, 0x7d, 0x93, 0x60, 0x8d, 0xa4, 0xab, 0xb8, 0x54, 0x52, 0x4b, 0xff, 0xdc, 0x20, 0xf1,
	0x1a, 0x61, 0x06, 0x89, 0xeb, 0x9b, 0xe1, 0x57, 0x38, 0xba, 0x35, 0xd4, 0x07, 0x41, 0xda, 0x7f,
	0x0c, 0xae, 0xe0, 0x81, 0xf3, 0xcc, 0x79, 0x71, 0x34, 0x76, 0x05, 0xf7, 0x2f, 0xe1, 0xa1, 0xe1,
	0x98, 0xe0, 0x81, 0x6b, 0x9b, 0x9e, 0x29, 0xef, 0xb8, 0xff, 0x14, 0x1e, 0x71, 0x51, 0x8b, 0x4a,
	0x48, 0x32, 0xc3, 0x07, 0x76, 0x08, 0xff, 0x5a, 0x77, 0xdc, 0x3f, 0x87, 0x43, 0xd9, 0x10, 0xaa,
	0xe0, 0xc0, 0x8e, 0xda, 0x62, 0xf8, 0xc3, 0x85, 0x0b, 0xab, 0x36, 0xc6, 0x1c, 0x45, 0x8d, 0xb7,
	0xf3, 0x12, 0x95, 0x40, 0xca, 0xb1, 0x2b, 0xe5, 0xf4, 0xa4, 0xae, 0xe1, 0x44, 0x16, 0x9c, 0x75,
	0xe5, 0x5a, 0x2f, 0xc7, 0xb2, 0xe0, 0xef, 0xb6, 0x8a, 0xd7, 0x70, 0x42, 0xd8, 0xb0, 0x7d, 0x5b,
	0xc7, 0x84, 0x4d, 0x87, 0x7b, 0x05, 0x57, 0xaa, 0x55, 0x67, 0xb8, 0x91, 0x67, 0xe9, 0x54, 0xce,
	0x48, 0xaf, 0xdd, 0x5e, 0xaa, 0x5d, 0x7b, 0x6f, 0xec, 0xd8, 0x7f, 0x0d, 0x4f, 0x14, 0x4e, 0x53,
	0x41, 0x82, 0x26, 0xff, 0xd9, 0x3e, 0xb4, 0xdb, 0x57, 0x1b, 0x64, 0x6f, 0xff, 0x02, 0xbc, 0x0a,
	0x89, 0xa3, 0x0a, 0xbc, 0xf6, 0x8d, 0x6d, 0x35, 0xfc, 0xe9, 0x40, 0x60, 0x73, 0xf9, 0x54, 0xf2,
	0x54, 0xe3, 0x48, 0x36, 0xa8, 0x3e, 0xd2, 0x08, 0x95, 0x90, 0xfc, 0xfe, 0x64, 0x22, 0x38, 0x33,
	0xc9, 0x94, 0x86, 0x66, 0x92, 0x58, 0x69, 0xf9, 0x75, 0x3a, 0xa7, 0xb2, 0xe0, 0xfd, 0xff, 0x44,
	0x70, 0x66, 0x02, 0xda, 0xc5, 0xdb, 0x90, 0x4e, 0x09, 0x9b, 0x3e, 0xbe, 0xf5, 0x7a, 0xd0, 0xf5,
	0xfa, 0xf6, 0xfd, 0xaf, 0x65, 0xe8, 0x2c, 0x96, 0xa1, 0xf3, 0x67, 0x19, 0x3a, 0xdf, 0x57, 0xe1,
	0x60, 0xb1, 0x0a, 0x07, 0xbf, 0x57, 0xe1, 0xe0, 0x73, 0x34, 0x11, 0xfa, 0xcb, 0x2c, 0x8b, 0x73,
	0x39, 0x4d, 0xcc, 0xad, 0x15, 0x69, 0x56, 0xd9, 0x8f, 0x64, 0xde, 0xbf, 0x4c, 0xfd, 0xad, 0xc4,
	0x2a, 0xf3, 0xec, 0x59, 0xbe, 0xfc, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xd7, 0xb3, 0x83, 0xca, 0xbb,
	0x02, 0x00, 0x00,
}

func (m *EventMint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventMint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DivisionId) > 0 {
		i -= len(m.DivisionId)
		copy(dAtA[i:], m.DivisionId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DivisionId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventReceiveExperience) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventReceiveExperience) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventReceiveExperience) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.RemainingExperienceAmount) > 0 {
		i -= len(m.RemainingExperienceAmount)
		copy(dAtA[i:], m.RemainingExperienceAmount)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RemainingExperienceAmount)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ReceiveExperienceAmount) > 0 {
		i -= len(m.ReceiveExperienceAmount)
		copy(dAtA[i:], m.ReceiveExperienceAmount)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ReceiveExperienceAmount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NewDivisionId) > 0 {
		i -= len(m.NewDivisionId)
		copy(dAtA[i:], m.NewDivisionId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewDivisionId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OldDivisionId) > 0 {
		i -= len(m.OldDivisionId)
		copy(dAtA[i:], m.OldDivisionId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OldDivisionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventUpdatePowerOnPeriod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUpdatePowerOnPeriod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUpdatePowerOnPeriod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NewPowerOnPeriod) > 0 {
		i -= len(m.NewPowerOnPeriod)
		copy(dAtA[i:], m.NewPowerOnPeriod)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewPowerOnPeriod)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OldPowerOnPeriod) > 0 {
		i -= len(m.OldPowerOnPeriod)
		copy(dAtA[i:], m.OldPowerOnPeriod)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OldPowerOnPeriod)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventMint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.DivisionId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventReceiveExperience) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.OldDivisionId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NewDivisionId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ReceiveExperienceAmount)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.RemainingExperienceAmount)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventUpdatePowerOnPeriod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.OldPowerOnPeriod)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NewPowerOnPeriod)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventMint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DivisionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DivisionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventReceiveExperience) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventReceiveExperience: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventReceiveExperience: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldDivisionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldDivisionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewDivisionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewDivisionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiveExperienceAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiveExperienceAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingExperienceAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemainingExperienceAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUpdatePowerOnPeriod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUpdatePowerOnPeriod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUpdatePowerOnPeriod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldPowerOnPeriod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldPowerOnPeriod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPowerOnPeriod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewPowerOnPeriod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
